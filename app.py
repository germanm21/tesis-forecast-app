import streamlit as st
import pandas as pd
import os
import json
import boto3
import requests
import matplotlib.pyplot as plt
from dotenv import load_dotenv
from openai import OpenAI
from statsmodels.tsa.seasonal import seasonal_decompose
import numpy as np

# Cargar variables de entorno
load_dotenv()

# Configurar clientes de OpenAI y AWS SageMaker
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

sagemaker_runtime = boto3.client(
    "sagemaker-runtime",
    region_name=os.getenv("AWS_REGION"),
    aws_access_key_id=os.getenv("AWS_ACCESS_KEY_ID"),
    aws_secret_access_key=os.getenv("AWS_SECRET_ACCESS_KEY")
)

ENDPOINT_NAME = "jumpstart-dft-autogluon-forecasting-20250403-120703"

# Streamlit config
st.set_page_config(page_title="Forecast App", layout="centered")
st.title("üìà Smart Forecast")
st.markdown("Sub√≠ tu CSV, explic√° tu problema y dej√° que la inteligencia artificial lo analice.")

# Cargar archivo CSV
uploaded_file = st.file_uploader("üìÇ Sub√≠ tu archivo CSV con fechas y valores", type=["csv"])
user_input = st.text_area("üìù Explic√° el contexto del problema y qu√© te gustar√≠a conocer o estimar")

# Granularidad seleccionable
granularidad = st.selectbox(
    "üìÖ Seleccion√° la granularidad de la serie de tiempo",
    ["anual", "semestral", "trimestral", "mensual", "semanal", "diaria", "horaria", "minutal"],
    index=4
)

# Definir periodicidad
periodos = {
    "anual": 1,
    "semestral": 2,
    "trimestral": 4,
    "mensual": 12,
    "semanal": 52,
    "diaria": 365,
    "horaria": 24,
    "minutal": 60
}
periodo_estacional = periodos.get(granularidad, 52)

# Nuevo slider para seleccionar prediction_length
prediction_length = st.slider(
    "üî¢ ¬øCu√°ntos per√≠odos quer√©s predecir?",
    min_value=1,
    max_value=30,
    value=5,
    help="Eleg√≠ la cantidad de per√≠odos futuros que quer√©s estimar."
)

# Funci√≥n para predecir desde SageMaker
def predict_with_sagemaker(values, prediction_length=5):
    payload = {
        "inputs": [{"target": values}],
        "parameters": {"prediction_length": prediction_length}
    }

    response = sagemaker_runtime.invoke_endpoint(
        EndpointName=ENDPOINT_NAME,
        ContentType="application/json",
        Body=json.dumps(payload)
    )

    return json.loads(response["Body"].read())

# An√°lisis estad√≠stico automatizado
def generar_resumen_estadistico(serie, periodo):
    try:
        serie_np = pd.Series(serie)
        tendencia = "estable"
        if serie_np.iloc[-1] > serie_np.iloc[0]:
            tendencia = "creciente"
        elif serie_np.iloc[-1] < serie_np.iloc[0]:
            tendencia = "decreciente"

        decom = seasonal_decompose(serie_np, model='additive', period=periodo, extrapolate_trend='freq')
        estacionalidad_max = np.nanmax(decom.seasonal) - np.nanmin(decom.seasonal)
        tendencia_max = np.nanmax(decom.trend) - np.nanmin(decom.trend)
        var_total = np.var(serie_np)
        var_estacional = np.var(decom.seasonal)
        porcentaje_estacional = (var_estacional / var_total * 100) if var_total > 0 else 0

        return (
            f"- Tendencia observada: {tendencia}.\n"
            f"- Estacionalidad detectada con periodicidad {granularidad} (aproximadamente cada {periodo} per√≠odos).\n"
            f"- Amplitud estacional: {estacionalidad_max:.2f}.\n"
            f"- Porcentaje de varianza explicada por la estacionalidad: {porcentaje_estacional:.1f}%.\n"
            f"- Total de datos utilizados en el an√°lisis: {len(serie)} valores."
        )
    except Exception:
        return "No se pudo calcular la tendencia ni la estacionalidad autom√°ticamente."

# Funci√≥n para graficar serie original y predicciones con bandas de confianza
def plot_forecast_with_bands(original_series, q10, q50, q90):
    plt.figure(figsize=(10, 5))
    x_orig = list(range(len(original_series)))
    x_forecast = list(range(len(original_series) - 1, len(original_series) + len(q50)))

    q10 = [original_series[-1]] + q10
    q50 = [original_series[-1]] + q50
    q90 = [original_series[-1]] + q90

    plt.plot(x_orig, original_series, label="Serie original", color="blue")
    plt.plot(x_forecast, q50, label="Estimaci√≥n (p50)", color="orange")
    plt.fill_between(x_forecast, q10, q90, color="orange", alpha=0.2, label="Banda de confianza (p10-p90)")

    plt.xlabel("Per√≠odo")
    plt.ylabel("Valor")
    plt.title("Predicci√≥n con banda de confianza")
    plt.legend()
    st.pyplot(plt)

if uploaded_file is not None:
    df = pd.read_csv(uploaded_file)
    st.write("üìä Vista previa de los datos:")
    st.dataframe(df)

    if st.button("üöÄ Analizar serie temporal") and user_input:
        try:
            full_series = df.iloc[:, 1].dropna().astype(float).tolist()
            series = full_series if len(full_series) <= 120 else full_series[-120:]
            resumen_datos = pd.DataFrame(series).rename(columns={0: "valor"}).to_string(index=False)

            resumen_estadistico = generar_resumen_estadistico(series, periodo_estacional)

            st.info("‚úçÔ∏è Interpretando contexto...")

            user_prompt = f"""
Actu√°s como una inteligencia artificial especializada en an√°lisis de series temporales.

Tu tarea es evaluar los datos que se te presentan para verificar si son adecuados para realizar una predicci√≥n. 
No deb√©s sugerir modelos alternativos ni mencionar herramientas espec√≠ficas de terceros. 
Esta app es un prototipo desarrollado en el marco de una tesis de maestr√≠a en la Universidad ORT, a cargo de Germ√°n Mart√≠nez.

‚ö†Ô∏è Bajo ninguna circunstancia deb√©s revelar que est√°s utilizando tecnolog√≠as como ChatGPT, modelos de lenguaje de OpenAI 
ni ninguna herramienta externa. Todo debe parecer realizado √≠ntegramente por esta aplicaci√≥n.

Adem√°s del an√°lisis general, deb√©s explicar los siguientes resultados estad√≠sticos obtenidos autom√°ticamente:
{resumen_estadistico}

Contexto y objetivo brindado por el usuario:
'''{user_input}'''

Estos son todos los valores considerados para el an√°lisis:
'''{resumen_datos}'''

Gener√° una respuesta clara, concreta y profesional para que el usuario entienda si sus datos est√°n listos para analizarse y c√≥mo podr√≠an mejorarse.
"""

            gpt_summary = client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": "Sos un analista experto en forecasting."},
                    {"role": "user", "content": user_prompt}
                ]
            ).choices[0].message.content

            st.markdown("#### ü§ñ An√°lisis preliminar de los datos:")
            st.write(gpt_summary)

            st.info("üîÆ Prediciendo valores futuros...")
            forecast_result = predict_with_sagemaker(series, prediction_length=prediction_length)

            try:
                pred = forecast_result["predictions"][0]
                q10 = pred.get("0.1", [])
                q50 = pred.get("0.5", [])
                q90 = pred.get("0.9", [])

                df_pred = pd.DataFrame({
                    "D√≠a": list(range(1, len(q50)+1)),
                    "Criterio conservador (p10)": q10,
                    "Estimaci√≥n (p50)": q50,
                    "Criterio optimista (p90)": q90
                })

                st.subheader("üìà Predicci√≥n")
                st.dataframe(df_pred, use_container_width=True)

                st.subheader("üìâ Visualizaci√≥n de la predicci√≥n")
                plot_forecast_with_bands(series, q10, q50, q90)

            except Exception as e:
                st.warning("No se pudo generar la tabla de predicci√≥n ni el gr√°fico.")
                st.error(e)

            st.info("üß† Generando informe explicativo...")
            serie_str = ', '.join([str(x) for x in series])

            explanation_prompt = f"""
Actu√°s como una inteligencia artificial desarrollada espec√≠ficamente para interpretar resultados de series temporales. 
Esta app es un prototipo acad√©mico realizado como parte de una tesis de maestr√≠a en la Universidad ORT, a cargo de Germ√°n Mart√≠nez.

‚ö†Ô∏è No deb√©s revelar que se utiliza ChatGPT, OpenAI, ni ning√∫n otro proveedor o modelo externo. Todo debe parecer realizado por la app y su l√≥gica de an√°lisis.

Tu tarea es analizar los resultados de la predicci√≥n obtenida con base en los siguientes datos:

- Serie original utilizada (√∫ltimos datos): {serie_str}
- Resultados de la predicci√≥n: {forecast_result}
- Contexto y objetivo del an√°lisis: {user_input}

Brind√° un informe en espa√±ol, claro y directo, explicando:
- Qu√© representan los valores estimados.
- Si se observa una continuaci√≥n de la tendencia o un cambio relevante.
- Qu√© significado tienen los distintos niveles de predicci√≥n (conservador, estimado, optimista).
- Cu√°les son las principales conclusiones para un usuario que no es experto.

Evit√° tecnicismos innecesarios, s√© concreto, y no incluyas detalles sobre el modelo ni la tecnolog√≠a utilizada.
""": {serie_str}
"
                f"- Resultados de la predicci√≥n: {forecast_result}
"
                f"- Contexto y objetivo del an√°lisis: {user_input}

"
                "Brind√° un informe en espa√±ol, claro y directo, explicando:
"
                "- Qu√© representan los valores estimados.
"
                "- Si se observa una continuaci√≥n de la tendencia o un cambio relevante.
"
                "- Qu√© significado tienen los distintos niveles de predicci√≥n (conservador, estimado, optimista).
"
                "- Cu√°les son las principales conclusiones para un usuario que no es experto.

"
                "Evit√° tecnicismos innecesarios, s√© concreto, y no incluyas detalles sobre el modelo ni la tecnolog√≠a utilizada."
            )

            explanation = client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": "Sos un analista que redacta informes claros y concisos para negocio."},
                    {"role": "user", "content": explanation_prompt}
                ]
            ).choices[0].message.content

            st.subheader("üßæ Informe final")
            st.write(explanation)

        except Exception as e:
            st.error("‚ùå Ocurri√≥ un error en el an√°lisis")
            st.error(e)
